package com.internalaudit.server;


import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;

import javax.servlet.http.HttpSession;

import org.hibernate.criterion.Restrictions;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.ibm.icu.text.SimpleDateFormat;
import com.internalaudit.client.InternalAuditService;
import com.internalaudit.database.MySQLRdbHelper;
import com.internalaudit.shared.AuditEngagement;
import com.internalaudit.shared.DashBoardDTO;
import com.internalaudit.shared.Department;
import com.internalaudit.shared.Employee;
import com.internalaudit.shared.ExcelDataDTO;
import com.internalaudit.shared.JobAndAreaOfExpertise;
import com.internalaudit.shared.JobCreation;
import com.internalaudit.shared.JobCreationDTO;
import com.internalaudit.shared.AuditStep;
import com.internalaudit.shared.AuditWork;
import com.internalaudit.shared.Exceptions;
import com.internalaudit.shared.InternalAuditConstants;
import com.internalaudit.shared.JobEmployeeRelation;
import com.internalaudit.shared.JobTimeEstimationDTO;
import com.internalaudit.shared.JobsOfEmployee;
import com.internalaudit.shared.ResourceUse;
import com.internalaudit.shared.Risk;
import com.internalaudit.shared.RiskAssesmentDTO;
import com.internalaudit.shared.RiskFactor;
import com.internalaudit.shared.SkillUpdateData;
import com.internalaudit.shared.Skills;
import com.internalaudit.shared.Strategic;
import com.internalaudit.shared.StrategicAudit;
import com.internalaudit.shared.StrategicDTO;
import com.internalaudit.shared.StrategicDepartments;
import com.internalaudit.shared.StrategicRisk;
import com.internalaudit.shared.TimeOutException;
import com.internalaudit.shared.User;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;

/**
 * The server side implementation of the RPC service.
 */
@SuppressWarnings("serial")
public class InternalAuditServiceImpl extends RemoteServiceServlet implements
		InternalAuditService {
	HttpSession session ;
	@Override
	
	public User signIn(String userid, String password) throws Exception {// NOT HERE
		//String result = "";
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
		"applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		User user = (User) rdbHelper.getAuthentication(userid, password);
		
		///
		//
		if(user!=null)
		{
			session=getThreadLocalRequest().getSession(true);

			session.setAttribute("user", user);
			session.setAttribute("year", 2014);//TODO: Need to get Current Year here.. in this format  i.e  2014,2015..
			session.setMaxInactiveInterval(InternalAuditConstants.TIMEOUT);
		}
		return user;

	}
	@Override
	public ArrayList<Employee> fetchObjectiveOwners() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				return rdbHelper.fetchEmployees();
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}	
	}
	@Override
	public ArrayList<Department> fetchDepartments() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				return rdbHelper.fetchDepartments();
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}	
	}
	
	@Override
	public ArrayList<Skills> fetchSkills() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				return rdbHelper.fetchSkills();
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	
	@Override
	public String saveStrategic(Strategic strategic, HashMap<String, String> hm)
			throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.saveStrategic(strategic, loggedInUser, hm, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<RiskFactor> fetchRiskFactors() throws Exception {
		
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				return rdbHelper.fetchRiskFactors();
				
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<Strategic> fetchStrategic(HashMap<String, String> hm) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				 hm.put("year", year+"");
				return rdbHelper.fetchStrategic(hm, loggedInUser.getEmployeeId().getEmployeeId());
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public String saveRiskAssesment(HashMap<String, String> hm,ArrayList<StrategicRisk> strategicRisks)
			throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				hm.put("year", year+"");
				return rdbHelper.saveRiskAssesment(strategicRisks, loggedInUser, hm);
			}else{
				
				throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
				
			}
	}
	
	@Override
	public String sendBackStrategic(Strategic strategics) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				
				return rdbHelper.amendStrategic(strategics, loggedInUser, year );
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<RiskAssesmentDTO> fetchRiskAssesment(HashMap<String, String> hm) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.fetchRiskAssesment(hm, loggedInUser.getEmployeeId().getEmployeeId(), year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public String declineStrategic(int strategicId) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				return rdbHelper.declineStrategic(strategicId);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<StrategicAudit> fetchStrategicAudit() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.fetchStrategicAidit(year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public DashBoardDTO fetchDashBoard() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				User loggedInUser = (User) session.getAttribute("user");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.fetchDashBoard(loggedInUser, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Strategic> fetchFinalAuditables() throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.fetchFinalAuditables(year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<StrategicDTO> fetchSchedulingStrategic(
			HashMap<String, String> hm) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
				MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
				int year = (Integer) session.getAttribute("year");
				return rdbHelper.fetchSchdulingStrategic(hm, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public Boolean checkDate(Date date) throws Exception {
		if(isLoggedIn()){
		DateTime enteredDate = new DateTime(date); 
		DateTime currentDate = new DateTime(); //current date
		if(currentDate.isAfter(enteredDate) ){
			return false;
		}else 
			return true;
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	

	@Override
	public JobTimeEstimationDTO fetchJobTime(int jobId) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchJobTime(jobId, year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<Employee> fetchEmployees() throws Exception{ // Add throw Exception  here..
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		return rdbHelper.fetchEmployees();
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<ResourceUse> fetchResourceUseFor(int jobId) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		
		return rdbHelper.fetchResourceUseFor(jobId, year);
		}else{
		
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
		}
	}
	@Override
	public ArrayList<Employee> fetchEmployeesByDeptId(ArrayList<Integer> depIds) throws Exception{
		if(isLoggedIn()){
			ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
					MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
					return rdbHelper.fetchEmployeesByDeptId(depIds);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
					
	}
	@Override
	public void saveJobAndAreaOfExpertiseState(ArrayList<JobAndAreaOfExpertise> state) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		rdbHelper.saveJobAndAreaOfExpertiseState(state);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<JobAndAreaOfExpertise> fetchCheckBoxStateFor(int jobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchCheckBoxStateFor(jobId);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public void saveCreatedJob(JobCreationDTO job) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		rdbHelper.saveCreatedJob(job, year);	
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	
	@Override
	public ArrayList<JobCreationDTO> fetchCreatedJobs( boolean getEmpRelation, boolean getSkillRelation) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchCreatedJobs(getEmpRelation, getSkillRelation, year);	
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	
	@Override
	public ArrayList<JobsOfEmployee> fetchEmployeesWithJobs() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		 ArrayList<JobsOfEmployee> test = rdbHelper.fetchEmployeesWithJobs();
		 
		 return test;
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	
	@Override
	public String getEndDate(Date startDate, int estWeeks) throws Exception
	{
		if(isLoggedIn()){
		DateTime enddate = new DateTime(startDate);
		
		enddate = enddate.plusWeeks(estWeeks);
				
		return enddate.toString(DateTimeFormat.forPattern("MM/dd/yy"));	
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}

	@Override
	public int[] getMonthsInvolved(String startDate, String endDate) throws Exception
	{
		if(isLoggedIn()){
		if ( startDate == null || endDate == null )
			return new int[] {0,0};
		
		Date end = null;
		Date start = null;
		SimpleDateFormat fmt = new SimpleDateFormat("dd, MM, yyyy");
		
		try {
			end = fmt.parse(endDate);
			start = fmt.parse(startDate);
		} catch (ParseException e) {
			
			e.printStackTrace();
		}
	
				
		Calendar c = Calendar.getInstance();

		
		c.setTime(start);
		
		int startMonth = c.get(Calendar.MONTH) + 1;


		c.setTime(end);

		
		int endMonth = c.get(Calendar.MONTH) + 1;
		

		return new int[] { startMonth, endMonth };
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}

	}
	
	@Override
	public JobCreation updateEndDateForJob(int jobId, String startDate, String endDate) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.updateEndDateForJob( jobId, startDate,  endDate);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
		
	}
	@Override
	public boolean saveJobTimeEstimation(JobTimeEstimationDTO entity, ArrayList<SkillUpdateData> updateForSkills) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.saveJobTimeEstimation( entity, updateForSkills, year );
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<AuditEngagement> fetchAllAuditEngagement(int loggedInEmployee) throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchAllAuditEngagement(loggedInEmployee, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public JobCreation fetchCreatedJob(int jobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchCreatedJob(jobId);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public boolean updateAuditEngagement(AuditEngagement e, String fieldToUpdate) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.updateAuditEngagement(e, fieldToUpdate, year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}

	}
	@Override
	public void syncAuditEngagementWithCreatedJobs(int loggedInEmployee)  throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		rdbHelper.syncAuditEngagementWithCreatedJobs(loggedInEmployee, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
		
	}
	@Override
	public boolean saveRisks(ArrayList<Risk> records)  throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.saveRisks(records, year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	
	@Override
	public boolean sendEmail(String body, String sendTo)  throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.sendEmail(body, sendTo, "","");
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public AuditEngagement fetchAuditEngagement(int selectedJobId)  throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchAuditEngagement(selectedJobId, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Risk> fetchRisks(int auditEngId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchRisks(auditEngId, year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	
//	@Override
//	public ArrayList<Object> fetchEmpForThisJob(int selectedJobId) {
//		
//		/*ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
//		
//		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
//		*/
//		
//		return null;//rdbHelper.fetchEmpForThisJob(selectedJobId);
//	}
	@Override
	public ArrayList<JobEmployeeRelation> fetchEmployeeJobRelations (
			int selectedJobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchEmployeeJobRelations(selectedJobId);
			}else{
				
				throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
				
			}
	}
	@Override
	public ArrayList<JobCreation> fetchJobs()  throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchJobs(year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	
	@Override
	public ArrayList<Exceptions> fetchJobExceptions(int jobId)  throws Exception {
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchJobExceptions(jobId, year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public String sendException(Exceptions exception) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.sendException(exception, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Exceptions> fetchEmployeeExceptions(int employeeId, int jobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchEmployeeExceptions(employeeId, jobId, year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public void saveAuditStepAndExceptions(AuditStep auditstep,
			ArrayList<Exceptions> exs) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		rdbHelper.saveAuditStepAndExceptions(auditstep, exs, year );
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public AuditStep getSavedAuditStep(int jobid, int auditWorkId) throws Exception{

		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.getSavedAuditStep(jobid, auditWorkId, year );
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
		
	}
	@Override
	public ArrayList<Exceptions> getSavedExceptions(int selectedJobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.getSavedExceptions(selectedJobId, year );
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
		
	}
	@Override
	public void saveAuditWork(ArrayList<AuditWork> records) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		rdbHelper.saveAuditWork( records, year );
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public void updateKickoffStatus(int auditEngId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		rdbHelper.updateKickoffStatus( auditEngId, year );
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}

	@Override
	public ArrayList<Exceptions> fetchAuditHeadExceptions(int auditHeadId,int selectedJob) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchAuditHeadExceptions(auditHeadId, selectedJob, year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}

	@Override
	public JobCreationDTO fetchCreatedJob(int id, boolean b, boolean c,	String string) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		return rdbHelper.fetchCreatedJob( id, b, c ,string );
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<AuditWork> fetchAuditWorkRows(int jocreationid) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchAuditWorkRows( jocreationid );
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
		
	}
	@Override
	public ArrayList<AuditWork> fetchApprovedAuditWorkRows(int selectedJobId) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchApprovedAuditWorkRows( selectedJobId );
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<JobCreation> fetchEmployeeJobs(Employee loggedInEmployee) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		
		return rdbHelper.fetchEmployeeJobs( loggedInEmployee );
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public String saveAuditNotification(int auditEngagementId,String message, String to, String cc) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		
		return rdbHelper.saveAuditNotification( auditEngagementId, message, to, cc , year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}

	
	private boolean isLoggedIn() throws Exception{
		
		HttpSession session = getThreadLocalRequest().getSession(true);
		if(session.getAttribute("user") == null){
			return false;
		}else{
			return true;
		}

	}
	
	public String logOut() throws Exception{
		if(isLoggedIn()){
		getThreadLocalRequest().getSession().invalidate();
		return "loggedOut";
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public void selectYear(int year) throws Exception{
		if(isLoggedIn()){
		session.setAttribute("year", year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public int fetchNumberofPlannedJobs() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		
		return rdbHelper.fetchNumberofPlannedJobs(year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public int fetchNumberofInProgressJobs() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberofInProgressJobs(year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public int fetchNumberofCompletedJobs() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberofCompletedJobs(year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<String> fetchJobsKickOffNextWeek() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchJobsKickOffNextWeek(year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public int fetchNumberOfAuditObservations() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberOfAufitObservations(year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public int fetchNumberOfExceptionsInProgress() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberOfExceptionsInProgress(year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public int fetchNumberOfExceptionsImplemented() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberOfExceptionsImplemented(year);
}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public int fetchNumberOfExceptionsOverdue() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchNumberOfExceptionsOverdue(year);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<String> fetchEmployeesAvilbleForNext2Weeks() throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchEmployeesAvilbleForNext2Weeks(year);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<StrategicDepartments> fetchStrategicDepartments(
			int strategicId) throws Exception {
		if(isLoggedIn()){
			ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
			MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
			int year = (Integer) session.getAttribute("year");
			return rdbHelper.fetchStrategicDepartments(strategicId);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Integer> fetchResourceIds(int strategicId)
			throws Exception {
		if(isLoggedIn()){
			ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
			MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
			int year = (Integer) session.getAttribute("year");
			return rdbHelper.fetchResourceIds(strategicId);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Integer> fetchJobSoftSkills(int strategicId)
			throws Exception {
		if(isLoggedIn()){
			ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
			MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
			int year = (Integer) session.getAttribute("year");
			return rdbHelper.fetchJobSoftSkills(strategicId);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public ArrayList<Strategic> fetchReportSearchResult(ArrayList<String> dept, ArrayList<String> domain, ArrayList<String> risk) throws Exception{
		if(isLoggedIn()){
		ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		int year = (Integer) session.getAttribute("year");
		return rdbHelper.fetchReportSearchResult( dept,  domain,  risk);
	}else{
		
		throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
		
	}
	}
	@Override
	public ArrayList<StrategicDepartments> fetchStrategicDepartmentsMultiple(
			ArrayList<Integer> ids) throws  Exception {
		
		if(isLoggedIn()){
			ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
			MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
			int year = (Integer) session.getAttribute("year");
			return rdbHelper.fetchStrategicDepartmentsMutiple(ids);
		}else{
			
			throw new TimeOutException(InternalAuditConstants.LOGGEDOUT);
			
		}
	}
	@Override
	public String exportToExcel(ArrayList<ExcelDataDTO> excelDataList)
			throws Exception {
		ApplicationContext ctx = new ClassPathXmlApplicationContext(
				"applicationContext.xml");
		String rootDir = getServletContext().getRealPath("/");
		MySQLRdbHelper rdbHelper = (MySQLRdbHelper) ctx.getBean("ManagerExams");
		return rdbHelper.exportToExcel(excelDataList, rootDir);
	}
	

}
